"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require("react");

var _require = require("react-bootstrap");

var Glyphicon = _require.Glyphicon;

var _require2 = require("./base");

var Type = _require2.Type;
var Node = _require2.Node;

var _require3 = require("./primitives");

var CUnit = _require3.CUnit;

var _require4 = require("./util");

var CSideEffect = _require4.CSideEffect;

var glyphmap = {
	error: "ban-circle",
	warning: "warning-sign",
	info: "info-sign"
};

function CValidate(testFn) {
	var type = arguments.length <= 1 || arguments[1] === undefined ? CUnit() : arguments[1];

	return new Type("validate", function makeValidate(ctx) {
		return new ValidationNode(testFn, type.makeNode(ctx), ctx);
	});
}

function renderValidation(messages) {
	return React.createElement(
		"div",
		{ className: "validate" },
		(function () {
			var _ref = [];
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = messages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var _step$value = _step.value;
					var level = _step$value.level;
					var msg = _step$value.msg;
					var fragment = _step$value.fragment;

					_ref.push(React.createElement(
						"div",
						{ className: "validate-" + level },
						React.createElement("a", { id: fragment }),
						React.createElement(Glyphicon, { glyph: glyphmap[level] }),
						" ",
						msg
					));
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator["return"]) {
						_iterator["return"]();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			return _ref;
		})()
	);
}

function renderWithValidation(inner, messages) {
	return React.createElement(
		"div",
		null,
		inner,
		renderValidation(messages)
	);
}

var ValidationNode = (function (_Node) {
	_inherits(ValidationNode, _Node);

	function ValidationNode(testFn, innerNode, ctx) {
		_classCallCheck(this, ValidationNode);

		_get(Object.getPrototypeOf(ValidationNode.prototype), "constructor", this).call(this);
		this._innerNode = innerNode;
		var messages = [];
		var emitter = function emitter(level) {
			return function (msg) {
				return messages.push(ctx.problems.add({ level: level, msg: msg }));
			};
		};
		var callbacks = {
			error: emitter("error"),
			warning: emitter("warning"),
			info: emitter("info")
		};
		testFn(this, callbacks, ctx);
		this._messages = messages;
	}

	_createClass(ValidationNode, [{
		key: "render",
		value: function render() {
			return renderWithValidation(this._innerNode.render(), this._messages);
		}
	}, {
		key: "inner",
		get: function get() {
			return this._innerNode;
		}
	}, {
		key: "value",
		get: function get() {
			return this.inner.value;
		}
	}]);

	return ValidationNode;
})(Node);

function CValidationMessages(messages) {
	return new Type("validationMessages", function makeValidationMessages(ctx) {
		return new ValidationMessagesNode(messages.map(function (m) {
			return ctx.problems.add(m);
		}));
	});
}

var ValidationMessagesNode = (function (_Node2) {
	_inherits(ValidationMessagesNode, _Node2);

	function ValidationMessagesNode(messages) {
		_classCallCheck(this, ValidationMessagesNode);

		_get(Object.getPrototypeOf(ValidationMessagesNode.prototype), "constructor", this).call(this);
		this._messages = messages;
	}

	_createClass(ValidationMessagesNode, [{
		key: "render",
		value: function render() {
			return renderValidation(this._messages);
		}
	}]);

	return ValidationMessagesNode;
})(Node);

module.exports = { CValidate: CValidate, CValidationMessages: CValidationMessages, renderWithValidation: renderWithValidation };
//# sourceMappingURL=../maps/lib/validation.js.map