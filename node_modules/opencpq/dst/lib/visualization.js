"use strict";

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var React = require("react");

var _require = require("./base");

var Type = _require.Type;

var _require2 = require("./workbench");

var View = _require2.View;

var _require3 = require("./util");

var CSideEffect = _require3.CSideEffect;

function escapeAttr(v) {
	return ("" + v).replace('"', '&quot;', "g");
}

var SVGImage = (function () {
	function SVGImage(options) {
		_classCallCheck(this, SVGImage);

		this._options = options;
	}

	_createClass(SVGImage, [{
		key: "render",
		value: function render() {
			var options = this._options;
			var attributes = ["x", "y", "width", "height"].reduce(function (acc, name) {
				var val = options[name];
				return val === undefined ? acc : acc + " " + name + "=\"" + escapeAttr(val) + "\"";
			}, "xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"resources/" + escapeAttr(options.url) + "\"");
			// The <g/> element is only needed to hold React's
			// "dangerouslySetInnerHTML".  We don't need it for the SVG tree.
			// See https://github.com/facebook/react/issues/2863#issuecomment-75253614
			// for an explanation of the key attribute.
			return React.createElement("g", { key: attributes, dangerouslySetInnerHTML: { __html: "<image " + attributes + "/>" } });
		}
	}]);

	return SVGImage;
})();

function CImage(spec, type) {
	function addImage(node, ctx) {
		var visualization = ctx.visualization;

		function processSpec(spec) {
			if (spec == undefined) {
				// do nothing;
			} else if (spec instanceof Function) processSpec(spec(ctx));else if (spec instanceof Array) spec.forEach(processSpec);else visualization.add(new SVGImage(spec));
		}
		processSpec(spec);
	}
	return CSideEffect(addImage, type);
}

var VisualizationContainer = (function () {
	function VisualizationContainer(renderWrapper) {
		var _this = this;

		_classCallCheck(this, VisualizationContainer);

		this._children = [];
		this.render = function () {
			return renderWrapper(_this._children.map(function (child) {
				return child.render();
			}));
		};
	}

	_createClass(VisualizationContainer, [{
		key: "add",
		value: function add(child) {
			this._children.push(child);
		}
	}]);

	return VisualizationContainer;
})();

function CWrapVisualization(renderWrapper, type) {
	return new Type("visualizationWrapper", function makeVisualizationWrapper(ctx) {
		var subVisualization = new VisualizationContainer(renderWrapper);
		ctx.visualization.add(subVisualization);
		return type.makeNode(_extends({}, ctx, { visualization: subVisualization }));
	});
}

function CTransform(spec, type) {
	return CWrapVisualization(function (children) {
		return React.createElement(
			"g",
			{ transform: spec },
			children
		);
	}, type);
}

function CSVGRoot(_ref, type) {
	var width = _ref.width;
	var height = _ref.height;

	return CWrapVisualization(function (children) {
		return React.createElement(
			"svg",
			{ width: width, height: height },
			children
		);
	}, type);
}

var Visualization = (function (_VisualizationContainer) {
	_inherits(Visualization, _VisualizationContainer);

	function Visualization() {
		_classCallCheck(this, Visualization);

		_get(Object.getPrototypeOf(Visualization.prototype), "constructor", this).call(this, function (children) {
			return React.createElement(
				"div",
				{ style: { width: "100%", display: "inline-flex", flexWrap: "wrap" } },
				children
			);
		});
	}

	return Visualization;
})(VisualizationContainer);

function VVisualization(_ref2) {
	var visualization = _ref2.visualization;

	return new View("visualization", function renderVisualization() {
		return visualization.render();
	});
}

module.exports = {
	CImage: CImage, CTransform: CTransform, CSVGRoot: CSVGRoot, CWrapVisualization: CWrapVisualization,
	Visualization: Visualization, VVisualization: VVisualization
};
//# sourceMappingURL=../maps/lib/visualization.js.map