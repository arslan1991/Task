{"version":3,"sources":["lib/quantification.js"],"names":[],"mappings":";;;;eAAiB,OAAO,CAAC,cAAc,CAAC;;IAAnC,QAAQ,YAAR,QAAQ;;gBACQ,OAAO,CAAC,sBAAsB,CAAC;;IAA/C,YAAY,aAAZ,YAAY;;gBACC,OAAO,CAAC,cAAc,CAAC;;IAApC,SAAS,aAAT,SAAS;;gBACoB,OAAO,CAAC,SAAS,CAAC;;IAA/C,MAAM,aAAN,MAAM;IAAE,iBAAiB,aAAjB,iBAAiB;;gBACN,OAAO,CAAC,SAAS,CAAC;;IAArC,OAAO,aAAP,OAAO;IAAE,MAAM,aAAN,MAAM;;gBACA,OAAO,CAAC,QAAQ,CAAC;;IAAhC,WAAW,aAAX,WAAW;;gBACG,OAAO,CAAC,SAAS,CAAC;;IAAhC,UAAU,aAAV,UAAU;;AAEf,SAAS,WAAW,CAAC,IAAI,EAAE;AAC1B,QAAO,MAAM,CAAC,UAAC,IAAwB;mBAAxB,IAAwB,CAAvB,KAAK;0CAAe,EAAE;MAAd,QAAQ,cAAR,QAAQ;SAAY,CAC3C,iBAAiB,CAAC,UAAU,EAAE,SAAS,CACtC,SAAS,aAAa,CAAC,IAAI,EAAE,KAAsB,EAAE,GAAG,EAAE;OAA5B,KAAK,GAAN,KAAsB,CAArB,KAAK;OAAE,OAAO,GAAf,KAAsB,CAAd,OAAO;OAAE,IAAI,GAArB,KAAsB,CAAL,IAAI;;AACjD,OAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;AAC7B,OAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,EAC5B,KAAK,CAAC,gCAAgC,CAAC,CAAA;GACxC,EACD,QAAQ,CAAC,EAAC,YAAY,EAAE,CAAC,EAAE,SAAS,EAAE,UAAU,EAAC,CAAC,CAClD,CAAC,EACF,iBAAiB,CAAC,OAAO,EAAE,YAAY;;;AAGtC,UAAQ,KAAK,EAAE,IAAI,QAAQ,IAAI,IAAI,GAAG,CAAC,GAAG,QAAQ,EAClD,IAAI,CAAC,CAAC,CACP;EAAA,CAAC,CAAC;CACH;;AAED,SAAS,eAAe,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;gBACzB,OAAO;KAAvB,YAAY,YAAZ,YAAY;;AACjB,KAAI,YAAY,IAAI,SAAS,EAC5B,OAAO,gBAAO,OAAO,IAAE,YAAY,EAAE,CAAC,SAAS,CAAC,GAAC,CAAC;AACnD,QAAO,MAAM,CACZ,OAAO,EACP,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,EACnD,WAAW,CAAC,IAAI,CAAC,CACjB,CAAC;CACF;;AAED,MAAM,CAAC,OAAO,GAAG,EAAC,WAAW,EAAX,WAAW,EAAE,eAAe,EAAf,eAAe,EAAC,CAAC","file":"lib/quantification.js","sourcesContent":["var {CInteger} = require(\"./primitives\");\nvar {CMultiplying} = require(\"./linear-aggregation\");\nvar {CValidate} = require(\"./validation\");\nvar {CGroup, cUnlabelledMember} = require(\"./group\");\nvar {ccolumn, CTable} = require(\"./table\");\nvar {CSideEffect} = require(\"./util\");\nvar {CNameSpace} = require(\"./names\");\n\nfunction CQuantified(type) {\n\treturn CGroup(({value: {quantity} = {}}) => [\n\t\tcUnlabelledMember(\"quantity\", CValidate(\n\t\t\tfunction checkQuantity(node, {error, warning, info}, ctx) {\n\t\t\t\tvar value = node.inner.value;\n\t\t\t\tif (isNaN(value) || value < 1)\n\t\t\t\t\terror(\"Enter a positive whole number.\")\n\t\t\t},\n\t\t\tCInteger({defaultValue: 1, className: \"quantity\"})\n\t\t)),\n\t\tcUnlabelledMember(\"value\", CMultiplying(\n\t\t\t// TODO Don't repeat the defaulting logic of\n\t\t\t// IntegerNode/StringNode here.\n\t\t\tquantity === \"\" || quantity == null ? 1 : quantity,\n\t\t\ttype))\n\t]);\n}\n\nfunction CQuantifiedList(options, label, type) {\n\tvar {defaultValue} = options;\n\tif (defaultValue == undefined)\n\t\toptions = {...options, defaultValue: [undefined]};\n\treturn CTable(\n\t\toptions,\n\t\t[ccolumn(\"quantity\", \"#\"), ccolumn(\"value\", label)],\n\t\tCQuantified(type)\n\t);\n}\n\nmodule.exports = {CQuantified, CQuantifiedList};\n"],"sourceRoot":"/source/"}