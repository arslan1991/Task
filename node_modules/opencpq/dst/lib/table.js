"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require("react");

var _require = require("react-bootstrap");

var Table = _require.Table;
var Button = _require.Button;
var DropdownButton = _require.DropdownButton;
var MenuItem = _require.MenuItem;

var _require2 = require("./base");

var Type = _require2.Type;
var Node = _require2.Node;

var _require3 = require("./group");

var CGroup = _require3.CGroup;

function CTable(options, columnLabels, rowType) {
	return new TableType(options, columnLabels, rowType);
}

var TableType = (function (_Type) {
	_inherits(TableType, _Type);

	function TableType(options, columnLabels, rowType) {
		_classCallCheck(this, TableType);

		var _options$defaultValue = options.defaultValue;
		var defaultValue = _options$defaultValue === undefined ? [] : _options$defaultValue;

		_get(Object.getPrototypeOf(TableType.prototype), "constructor", this).call(this, "table", function makeTable(ctx) {
			var _ctx$value = ctx.value;
			var value = _ctx$value === undefined ? defaultValue : _ctx$value;
			var updateTo = ctx.updateTo;

			var rows = value.map(function (element, i) {
				if (element === undefined) element = {};

				function updateElement(newElement) {
					var newList = value.slice();
					newList[i] = newElement;
					updateTo(newList);
				}
				return rowType.makeNode(_extends({}, ctx, {
					value: element,
					updateTo: updateElement,
					rowIndex: i,
					path: ctx.path.ext(i)
				}));
			});
			function splice() {
				var newList = value.slice();

				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				newList.splice.apply(newList, args);
				updateTo(newList);
			}
			return new TableNode({ columnLabels: columnLabels, rows: rows, list: value, splice: splice });
		});
	}

	return TableType;
})(Type);

var TableNode = (function (_Node) {
	_inherits(TableNode, _Node);

	function TableNode() {
		_classCallCheck(this, TableNode);

		_get(Object.getPrototypeOf(TableNode.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(TableNode, [{
		key: "render",
		value: function render() {
			// TODO: drag'n'drop
			var _options = this.__options;
			var columnLabels = _options.columnLabels;
			var rows = _options.rows;
			var list = _options.list;
			var splice = _options.splice;

			return React.createElement(
				Table,
				{ className: "table" },
				React.createElement(
					"colgroup",
					null,
					React.createElement("col", { className: "col-buttons" }),
					(function () {
						var _ref = [];
						var _iteratorNormalCompletion = true;
						var _didIteratorError = false;
						var _iteratorError = undefined;

						try {
							for (var _iterator = columnLabels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
								var _name = _step.value.name;

								_ref.push(React.createElement("col", { className: "col-" + _name }));
							}
						} catch (err) {
							_didIteratorError = true;
							_iteratorError = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion && _iterator["return"]) {
									_iterator["return"]();
								}
							} finally {
								if (_didIteratorError) {
									throw _iteratorError;
								}
							}
						}

						return _ref;
					})()
				),
				React.createElement(
					"thead",
					null,
					React.createElement(
						"tr",
						null,
						React.createElement(
							"th",
							null,
							React.createElement(
								Button,
								{ className: "dim", onClick: function () {
										return splice(0, 0, undefined);
									} },
								"+"
							)
						),
						(function () {
							var _ref2 = [];
							var _iteratorNormalCompletion2 = true;
							var _didIteratorError2 = false;
							var _iteratorError2 = undefined;

							try {
								for (var _iterator2 = columnLabels[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
									var label = _step2.value.label;

									_ref2.push(React.createElement(
										"th",
										null,
										label
									));
								}
							} catch (err) {
								_didIteratorError2 = true;
								_iteratorError2 = err;
							} finally {
								try {
									if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
										_iterator2["return"]();
									}
								} finally {
									if (_didIteratorError2) {
										throw _iteratorError2;
									}
								}
							}

							return _ref2;
						})()
					)
				),
				React.createElement(
					"tbody",
					null,
					rows.length === 0 ? React.createElement(
						"tr",
						null,
						React.createElement(
							"td",
							{ colSpan: columnLabels.length + 1 },
							React.createElement(
								"div",
								{ className: "validate validate-info" },
								"(no entries)"
							)
						)
					) : rows.map(function (row, i) {
						return React.createElement(
							"tr",
							null,
							React.createElement(
								"td",
								null,
								React.createElement(
									DropdownButton,
									{ title: "", className: "dim list-ops-button" },
									React.createElement(
										MenuItem,
										{ onSelect: function () {
												return splice(i + 1, 0, undefined);
											} },
										"insert"
									),
									React.createElement(
										MenuItem,
										{ onSelect: function () {
												return splice(i + 1, 0, list[i]);
											} },
										"copy"
									),
									React.createElement(
										MenuItem,
										{ onSelect: function () {
												return splice(i, 1);
											} },
										"delete"
									),
									i > 0 && React.createElement(
										MenuItem,
										{ onSelect: function () {
												return splice(i - 1, 2, list[i], list[i - 1]);
											} },
										"up"
									),
									i < list.length - 1 && React.createElement(
										MenuItem,
										{ onSelect: function () {
												return splice(i, 2, list[i + 1], list[i]);
											} },
										"down"
									)
								)
							),
							columnLabels.map(function (_ref3) {
								var name = _ref3.name;

								var member = row.member(name);
								var field = member == undefined ? undefined : member.render();
								return React.createElement(
									"td",
									null,
									field
								);
							})
						);
					})
				)
			);
		}
	}, {
		key: "rows",
		get: function get() {
			return this.__options.rows;
		}
	}]);

	return TableNode;
})(Node);

function ccolumn(name, label) {
	return { name: name, label: label };
}

module.exports = { CTable: CTable, TableType: TableType, ccolumn: ccolumn };
//# sourceMappingURL=../maps/lib/table.js.map