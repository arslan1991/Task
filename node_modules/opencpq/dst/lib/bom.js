"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var React = require("react");

var _require = require("./base");

var Type = _require.Type;
var Node = _require.Node;

var _require2 = require("./workbench");

var View = _require2.View;

var _require3 = require("./util");

var CSideEffect = _require3.CSideEffect;

var _require4 = require("react-bootstrap");

var ButtonGroup = _require4.ButtonGroup;
var Button = _require4.Button;
var Glyphicon = _require4.Glyphicon;
var Table = _require4.Table;

var saveAs = require("browser-filesaver");

// TODO Use a CSV lib?
function csvLine(fields) {
	var line = "";
	fields.forEach(function (field) {
		if (line.length > 0) line += ";";
		line += typeof field === "number" ? field : '"' + field.toString().replace(/"/g, '""') + '"';
	});
	line += "\n";
	return line;
}

var BOMView = (function () {
	// TODO Replace itemList with something more generic, e.g., a
	// function mapping the item to extra info (but in what format?).

	function BOMView(name, itemList, bom) {
		_classCallCheck(this, BOMView);

		this.name = name;
		var itemMap = {};
		itemList.forEach(function (entry) {
			return itemMap[entry.itemId] = entry;
		});
		this.__itemMap = itemMap;
		this.__bom = bom;
	}

	_createClass(BOMView, [{
		key: "render",
		value: function render() {
			var _this = this;

			return React.createElement(
				"div",
				null,
				React.createElement(
					ButtonGroup,
					null,
					React.createElement(
						Button,
						{ onClick: function () {
								return _this.exportCSV();
							} },
						React.createElement(Glyphicon, { glyph: "th" }),
						" export as CSV"
					)
				),
				this.renderBOM()
			);
		}
	}, {
		key: "exportCSV",
		value: function exportCSV() {
			var csv = [];
			var itemMap = this.__itemMap;
			this.__bom.mapItems(function (item, quantity) {
				var entry = itemMap[item];
				var label = entry == undefined ? "" : entry.label;
				var matNo = entry == undefined ? "" : entry.materialNumber;
				csv.push(csvLine([quantity, item, label, matNo]));
			});
			var blob = new Blob(csv, { type: "text/csv;charset=utf-8" });
			saveAs(blob, "openCPQ.csv");
		}
	}, {
		key: "renderBOM",
		value: function renderBOM() {
			var itemMap = this.__itemMap;
			return React.createElement(
				Table,
				{ className: "bom" },
				React.createElement(
					"colgroup",
					null,
					React.createElement("col", { className: "bom-col-quantity" }),
					React.createElement("col", { className: "bom-col-item" }),
					React.createElement("col", { className: "bom-col-description" }),
					React.createElement("col", { className: "bom-col-material-number" })
				),
				React.createElement(
					"thead",
					null,
					React.createElement(
						"tr",
						null,
						React.createElement(
							"th",
							{ className: "bom-quantity-head" },
							"#"
						),
						React.createElement(
							"th",
							{ className: "bom-item-head" },
							"Item ID"
						),
						React.createElement(
							"th",
							{ className: "bom-description-head" },
							"Description"
						),
						React.createElement(
							"th",
							{ className: "bom-material-number-head" },
							"Material No."
						)
					)
				),
				React.createElement(
					"tbody",
					null,
					this.__bom.empty() ? React.createElement(
						"tr",
						null,
						React.createElement(
							"td",
							{ colSpan: 4 },
							React.createElement(
								"div",
								{ className: "validate validate-info" },
								"(no entries)"
							)
						)
					) : this.__bom.mapItems(function (item, quantity) {
						var entry = itemMap[item];
						var label = entry == undefined ? "(missing)" : entry.label;
						var matNo = entry == undefined ? "(missing)" : entry.materialNumber;
						return React.createElement(
							"tr",
							null,
							React.createElement(
								"td",
								{ className: "bom-quantity" },
								quantity
							),
							React.createElement(
								"td",
								{ className: "bom-item" },
								item
							),
							React.createElement(
								"td",
								{ className: "bom-description" },
								label
							),
							React.createElement(
								"td",
								{ className: "bom-material-number" },
								matNo
							)
						);
					})
				)
			);
		}
	}]);

	return BOMView;
})();

function VBOM(itemList, _ref) {
	var bom = _ref.bom;

	return new BOMView("bom", itemList, bom);
}

function CBOMEntry(name, quantity, type) {
	return CSideEffect(function (node, _ref2) {
		var bom = _ref2.bom;
		return bom.add(name, quantity);
	}, type);
}

module.exports = { VBOM: VBOM, BOMView: BOMView, CBOMEntry: CBOMEntry, csvLine: csvLine };
//# sourceMappingURL=../maps/lib/bom.js.map