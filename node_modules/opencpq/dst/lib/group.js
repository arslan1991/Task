"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var React = require("react");

var _require = require("./base");

var Type = _require.Type;
var Node = _require.Node;

var _require2 = require("./label");

var CLabeled = _require2.CLabeled;

function cmember(name, label, type) {
	return { name: name, type: CLabeled(label, type) };
}

function cUnlabelledMember(name, type) {
	return { name: name, type: type };
}

function makeMemberNode(_ref, ctx) {
	var name = _ref.name;
	var type = _ref.type;
	var path = ctx.path;
	var _ctx$value = ctx.value;
	var value = _ctx$value === undefined ? {} : _ctx$value;
	var _updateTo = ctx.updateTo;

	return { name: name, node: type.makeNode(_extends({}, ctx, {
			path: path.ext(name),
			value: value[name],
			updateTo: function updateTo(newValue) {
				return _updateTo(_extends({}, value, _defineProperty({}, name, newValue)));
			}
		})) };
}

function preprocessMembers(rawMemberDecls, ctx) {
	var members = [];
	function process(m) {
		if (m == undefined) {
			// do nothing
		} else if (m instanceof Array) m.forEach(process);else if (m instanceof Function) process(m(ctx));else members.push(makeMemberNode(m, ctx));
	}
	process(rawMemberDecls);
	return members;
}

function CGroup(rawMemberDecls) {
	return new Type("group", function makeGroup(ctx) {
		return new GroupNode(preprocessMembers(rawMemberDecls, ctx));
	});
}

var GroupNode = (function (_Node) {
	_inherits(GroupNode, _Node);

	function GroupNode(members) {
		_classCallCheck(this, GroupNode);

		_get(Object.getPrototypeOf(GroupNode.prototype), "constructor", this).call(this);
		this._members = members;
		var indexedMembers = {};
		members.forEach(function (m) {
			return indexedMembers[m.name] = m.node;
		});
		this._indexedMembers = indexedMembers;
	}

	_createClass(GroupNode, [{
		key: "mapMembers",
		value: function mapMembers(fn) {
			return this._members.map(fn);
		}
	}, {
		key: "member",
		value: function member(name) {
			return this._indexedMembers[name];
		}
	}, {
		key: "render",
		value: function render() {
			return React.createElement(
				"div",
				{ className: "group" },
				this.mapMembers(function (_ref2) {
					var node = _ref2.node;
					return node == undefined ? undefined : node.render();
				})
			);
		}
	}]);

	return GroupNode;
})(Node);

module.exports = { CGroup: CGroup, cmember: cmember, cUnlabelledMember: cUnlabelledMember, GroupNode: GroupNode, preprocessMembers: preprocessMembers };
//# sourceMappingURL=../maps/lib/group.js.map