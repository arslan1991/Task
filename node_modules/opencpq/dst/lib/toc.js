"use strict";

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var React = require("react");

var _require = require("./base");

var Type = _require.Type;
var Node = _require.Node;

var _require2 = require("./workbench");

var View = _require2.View;

function VTOC(_ref2) {
	var toc = _ref2.toc;

	return new View("toc", function renderTOC() {
		return toc.render();
	});
}

var TOC = (function () {
	function TOC() {
		_classCallCheck(this, TOC);

		this._children = [];
	}

	_createClass(TOC, [{
		key: "add",
		value: function add(fragment, heading, child) {
			this._children.push({ fragment: fragment, heading: heading, child: child });
		}
	}, {
		key: "render",
		value: function render() {
			var children = this._children;
			return children.length === 0 ? undefined : React.createElement(
				"ul",
				null,
				(function () {
					var _ref = [];
					var _iteratorNormalCompletion = true;
					var _didIteratorError = false;
					var _iteratorError = undefined;

					try {
						for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
							var _step$value = _step.value;
							var fragment = _step$value.fragment;
							var heading = _step$value.heading;
							var child = _step$value.child;

							_ref.push(React.createElement(
								"li",
								null,
								React.createElement(
									"div",
									null,
									React.createElement(
										"a",
										{ href: "#" + fragment },
										heading
									),
									child.render()
								)
							));
						}
					} catch (err) {
						_didIteratorError = true;
						_iteratorError = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion && _iterator["return"]) {
								_iterator["return"]();
							}
						} finally {
							if (_didIteratorError) {
								throw _iteratorError;
							}
						}
					}

					return _ref;
				})()
			);
		}
	}, {
		key: "children",
		get: function get() {
			return this._children;
		}
	}]);

	return TOC;
})();

function CTOCEntry(name, headingFn, type) {
	return new Type("tocEntry", function makeTOCEntry(ctx) {
		var fragment = ctx.path.ext(name).toString();
		var subTOC = new TOC();
		var node = type.makeNode(_extends({}, ctx, { toc: subTOC }));
		ctx.toc.add(fragment, headingFn(node, ctx), subTOC);
		return new TOCNode({ fragment: fragment, node: node });
	});
}

var TOCNode = (function (_Node) {
	_inherits(TOCNode, _Node);

	function TOCNode() {
		_classCallCheck(this, TOCNode);

		_get(Object.getPrototypeOf(TOCNode.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(TOCNode, [{
		key: "render",
		value: function render() {
			var _options = this.__options;
			var fragment = _options.fragment;
			var node = _options.node;

			return React.createElement(
				"span",
				null,
				React.createElement("a", { id: fragment }),
				node.render()
			);
		}
	}]);

	return TOCNode;
})(Node);

module.exports = { VTOC: VTOC, TOC: TOC, CTOCEntry: CTOCEntry };
//# sourceMappingURL=../maps/lib/toc.js.map