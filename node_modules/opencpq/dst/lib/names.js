"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require("./base");

var Type = _require.Type;

var _require2 = require("./util");

var CSideEffect = _require2.CSideEffect;

function CNameSpace(nameSpaceName, type) {
	return new Type("nameSpace", function makeNameSpace(ctx) {
		return type.makeNode(_extends({}, ctx, _defineProperty({}, nameSpaceName, {})));
	});
}

var identity = function identity(x) {
	return x;
};

function CNamed(nameSpaceName, name, _ref, type) {
	var _ref$valueAccessor = _ref.valueAccessor;
	var valueAccessor = _ref$valueAccessor === undefined ? identity : _ref$valueAccessor;

	return CSideEffect(function setName(node, ctx) {
		return ctx[nameSpaceName][name] = valueAccessor(node);
	}, type);
}

module.exports = { CNameSpace: CNameSpace, CNamed: CNamed };
//# sourceMappingURL=../maps/lib/names.js.map