"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require("react");

var _require = require("react-bootstrap");

var ButtonGroup = _require.ButtonGroup;
var Button = _require.Button;
var DropdownButton = _require.DropdownButton;
var MenuItem = _require.MenuItem;

var _require2 = require("./display");

var HBox = _require2.HBox;

var _require3 = require("./base");

var Type = _require3.Type;
var Node = _require3.Node;

var _require4 = require("./validation");

var CValidate = _require4.CValidate;
var renderWithValidation = _require4.renderWithValidation;

var _require5 = require("./primitives");

var CUnit = _require5.CUnit;

var _require6 = require("./confirm-retract");

var confirmOrRetractButton = _require6.confirmOrRetractButton;

function ccase(name) {
	var label = arguments.length <= 1 || arguments[1] === undefined ? name : arguments[1];
	var type = arguments.length <= 2 || arguments[2] === undefined ? CUnit() : arguments[2];
	return (function () {
		return { name: name, label: label, type: type, mode: "plain", isDefault: false };
	})();
}

function cdefault(case_) {
	return _extends({}, case_, { isDefault: true });
}

// For the value:
function csel($case, $detail) {
	return { $case: $case, $detail: $detail };
}

function processCases(ctx, rawCases) {
	var result = [];
	function process(c) {
		if (c == undefined) {
			// do nothing
		} else if (c instanceof Array) c.forEach(process);else if (c instanceof Function) process(c(ctx));else result.push(c);
	}
	process(rawCases);
	return result;
}

var modes = ["plain", "warning", "error", "hidden"];
function modeIdx(mode) {
	return modes.indexOf(mode);
}

function findCaseWithBestMode(cases) {
	var i = modes.length;
	var bestCase = undefined;
	cases.forEach(function (case_) {
		var caseModeIdx = modeIdx(case_.mode);
		if (caseModeIdx < i) {
			i = caseModeIdx;
			bestCase = case_;
		}
	});
	return bestCase;
}

/**
 * For the basic usage of CSelect simply pass an array of cases as
 * created by ccase(...).  However, to provide some flexibility the
 * parameter of CSelect is processed as follows:
 * - For an array, process all its elements recursively.
 * - For a function, apply the function to the context and
 *   process the return value recursively.
 * - An undefined value is simply ignored.
 * - Otherwise the value is expected to be a case description (as
 *   returned by ccase(...)) and used as a menu entry.
 * This way for example a sub-range of menu entries can be made
 * dependent on the run-time context.
 */
function CSelect(rawCases) {
	return new Type("select", function makeSelect(ctx) {
		var value = ctx.value;
		var updateTo = ctx.updateTo;
		var problems = ctx.problems;

		var cases = processCases(ctx, rawCases);
		var defaultCase = cases.find(function (x) {
			return x.isDefault;
		}) || findCaseWithBestMode(cases) || cases[0];
		var userSelected = value != undefined;
		if (!userSelected) value = csel(defaultCase.name);
		function retract() {
			updateTo(undefined);
		}
		var _value = value;
		var caseName = _value.$case;
		var detail = _value.$detail;

		function getCase(name) {
			return cases.find(function (x) {
				return x.name === name;
			});
		}
		function updateCase(newCaseName) {
			updateTo(csel(newCaseName));
		}
		function updateDetail(newDetail) {
			updateTo(csel(caseName, newDetail));
		}
		var currentCase = getCase(caseName);
		if (currentCase == undefined) currentCase = {
			name: caseName,
			label: "unknown option: " + caseName,
			type: CUnit(),
			mode: "error"
		};
		var _currentCase = currentCase;
		var mode = _currentCase.mode;
		var _currentCase$messages = _currentCase.messages;
		var messages = _currentCase$messages === undefined ? [] : _currentCase$messages;

		messages = (function () {
			var _messages = [];
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = messages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var m = _step.value;

					_messages.push(problems.add(m));
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator["return"]) {
						_iterator["return"]();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			return _messages;
		})();
		var detailNode = currentCase.type.makeNode(_extends({}, ctx, { value: detail, updateTo: updateDetail }));
		return new SelectNode({ cases: cases, caseName: caseName, currentCase: currentCase, userSelected: userSelected, retract: retract, mode: mode, messages: messages, detailNode: detailNode, updateCase: updateCase });
	});
}

var SelectNode = (function (_Node) {
	_inherits(SelectNode, _Node);

	function SelectNode() {
		_classCallCheck(this, SelectNode);

		_get(Object.getPrototypeOf(SelectNode.prototype), "constructor", this).apply(this, arguments);
	}

	// Coding and using "unanswered" could be shown in a modelling demo.

	_createClass(SelectNode, [{
		key: "render",
		value: function render() {
			var _options = this.__options;
			var cases = _options.cases;
			var caseName = _options.caseName;
			var currentCase = _options.currentCase;
			var userSelected = _options.userSelected;
			var retract = _options.retract;
			var mode = _options.mode;
			var messages = _options.messages;
			var detailNode = _options.detailNode;
			var updateCase = _options.updateCase;

			var menu = renderWithValidation(React.createElement(
				ButtonGroup,
				null,
				React.createElement(
					DropdownButton,
					{ title: currentCase.label, className: "select-select select-mode-" + mode },
					(function () {
						var _ref = [];
						var _iteratorNormalCompletion2 = true;
						var _didIteratorError2 = false;
						var _iteratorError2 = undefined;

						try {
							for (var _iterator2 = cases[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
								var _step2$value = _step2.value;
								var _name = _step2$value.name;
								var label = _step2$value.label;
								var _mode = _step2$value.mode;

								_ref.push(React.createElement(
									MenuItem,
									{ className: "select-option option-mode-" + _mode, eventKey: _name, onSelect: updateCase },
									label
								));
							}
						} catch (err) {
							_didIteratorError2 = true;
							_iteratorError2 = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
									_iterator2["return"]();
								}
							} finally {
								if (_didIteratorError2) {
									throw _iteratorError2;
								}
							}
						}

						return _ref;
					})()
				),
				confirmOrRetractButton(userSelected, function () {
					return updateCase(currentCase.name);
				}, retract)
			), messages);
			var detail = detailNode.render();
			return React.createElement(
				"div",
				null,
				menu,
				detail == undefined ? undefined : React.createElement(
					"div",
					{ className: "select-detail" },
					detail
				)
			);
		}
	}, {
		key: "caseName",
		get: function get() {
			return this.__options.caseName;
		}
	}, {
		key: "value",
		get: function get() {
			return this.caseName;
		}
	}, {
		key: "label",
		get: function get() {
			var _options2 = this.__options;
			var cases = _options2.cases;
			var caseName = _options2.caseName;

			return cases.find(function (c) {
				return c.name == caseName;
			}).label;
		}
	}]);

	return SelectNode;
})(Node);

function unansweredCase(label) {
	return cdefault(ccase("unanswered", label, CValidate(function (node, _ref2) {
		var warning = _ref2.warning;
		return warning("No value selected.");
	})));
}

function CEither(rawOptions, thenType, elseType) {
	if (rawOptions === undefined) rawOptions = {};

	return new Type("either", function makeEither(ctx) {
		var _ctx$value = ctx.value;
		var value = _ctx$value === undefined ? {} : _ctx$value;
		var updateTo = ctx.updateTo;

		// TODO Support validation of the choice.
		var options = _extends({}, rawOptions);
		if (options.defaultValue === undefined) options.defaultValue = false;
		if (options.disabled == undefined) options.disabled = false;
		var choice = value.$case;
		var detail = value.$detail;

		var userSelected = choice !== undefined;
		if (!userSelected) choice = options.defaultValue;
		var detailType = choice ? thenType : elseType;
		if (detailType == undefined) detailType = CUnit();
		function retract() {
			updateTo(undefined);
		}
		function updateChoice(newChoice) {
			updateTo(csel(newChoice));
		}
		function updateDetail(newDetail) {
			updateTo(csel(choice, newDetail));
		}
		var detailNode = detailType.makeNode(_extends({}, ctx, { value: detail, updateTo: updateDetail }));
		return new EitherNode(_extends({}, options, { userSelected: userSelected, retract: retract, choice: choice, detailNode: detailNode, updateChoice: updateChoice }));
	});
}

var EitherNode = (function (_Node2) {
	_inherits(EitherNode, _Node2);

	function EitherNode() {
		_classCallCheck(this, EitherNode);

		_get(Object.getPrototypeOf(EitherNode.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(EitherNode, [{
		key: "render",
		value: function render() {
			var _this = this;

			var _options3 = this.__options;
			var disabled = _options3.disabled;
			var userSelected = _options3.userSelected;
			var retract = _options3.retract;
			var choice = _options3.choice;
			var detailNode = _options3.detailNode;
			var updateChoice = _options3.updateChoice;

			var choice = React.createElement(
				"span",
				null,
				React.createElement("input", {
					type: "checkbox",
					checked: choice,
					onChange: function (e) {
						return updateChoice(e.target.checked);
					},
					disabled: disabled
				}),
				confirmOrRetractButton(userSelected, function () {
					return updateChoice(_this.__options.choice);
				}, retract, "xsmall")
			);
			var detail = detailNode.render();
			return React.createElement(
				"div",
				null,
				choice,
				detail
			);
		}
	}, {
		key: "value",
		get: function get() {
			return this.__options.choice;
		}
	}]);

	return EitherNode;
})(Node);

module.exports = {
	CSelect: CSelect, SelectNode: SelectNode, ccase: ccase, cdefault: cdefault, unansweredCase: unansweredCase, csel: csel,
	CEither: CEither, EitherNode: EitherNode
};
//# sourceMappingURL=../maps/lib/select.js.map