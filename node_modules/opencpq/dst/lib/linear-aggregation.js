"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("./base");

var Type = _require.Type;

var SimpleAdderBase = (function () {
	function SimpleAdderBase() {
		_classCallCheck(this, SimpleAdderBase);
	}

	_createClass(SimpleAdderBase, [{
		key: "multiplying",
		value: function multiplying(factor) {
			return new SimpleMultiplyingAdder(this, factor);
		}
	}, {
		key: "closeMultiplying",
		value: function closeMultiplying(child, factor) {
			// do nothing
		}
	}, {
		key: "subAggregator",
		value: function subAggregator() {
			return new SimpleAdder();
		}
	}, {
		key: "closeSubAggregator",
		value: function closeSubAggregator(subAggregator) {
			this.add(subAggregator.get());
		}
	}]);

	return SimpleAdderBase;
})();

var SimpleAdder = (function (_SimpleAdderBase) {
	_inherits(SimpleAdder, _SimpleAdderBase);

	function SimpleAdder() {
		_classCallCheck(this, SimpleAdder);

		_get(Object.getPrototypeOf(SimpleAdder.prototype), "constructor", this).call(this);
		this._v = 0;
	}

	_createClass(SimpleAdder, [{
		key: "get",
		value: function get() {
			return this._v;
		}
	}, {
		key: "set",
		value: function set(n) {
			this._v = n;
		}
	}, {
		key: "add",
		value: function add() {
			var n = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];

			this._v += n;
		}
	}]);

	return SimpleAdder;
})(SimpleAdderBase);

var SimpleMultiplyingAdder = (function (_SimpleAdderBase2) {
	_inherits(SimpleMultiplyingAdder, _SimpleAdderBase2);

	function SimpleMultiplyingAdder(parent, factor) {
		_classCallCheck(this, SimpleMultiplyingAdder);

		_get(Object.getPrototypeOf(SimpleMultiplyingAdder.prototype), "constructor", this).call(this);
		this._parent = parent;
		this._factor = factor;
	}

	_createClass(SimpleMultiplyingAdder, [{
		key: "add",
		value: function add() {
			var n = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];

			this._parent.add(this._factor * n);
		}

		// or use the inherited method:
	}, {
		key: "multiplying",
		value: function multiplying(factor) {
			return new SimpleMultiplyingAdder(this._parent, this._factor * factor);
		}
	}]);

	return SimpleMultiplyingAdder;
})(SimpleAdderBase);

var NamedAdderBase = (function () {
	function NamedAdderBase() {
		_classCallCheck(this, NamedAdderBase);
	}

	_createClass(NamedAdderBase, [{
		key: "multiplying",
		value: function multiplying(factor) {
			return new NamedMultiplyingAdder(this, factor);
		}
	}, {
		key: "closeMultiplying",
		value: function closeMultiplying(child, factor) {
			// do nothing
		}
	}, {
		key: "subAggregator",
		value: function subAggregator() {
			return new NamedAdder();
		}
	}, {
		key: "closeSubAggregator",
		value: function closeSubAggregator(subAggregator) {
			var _this = this;

			subAggregator.mapItems(function (name, n) {
				return _this.add(name, n);
			});
		}
	}]);

	return NamedAdderBase;
})();

var NamedAdder = (function (_NamedAdderBase) {
	_inherits(NamedAdder, _NamedAdderBase);

	function NamedAdder() {
		_classCallCheck(this, NamedAdder);

		_get(Object.getPrototypeOf(NamedAdder.prototype), "constructor", this).call(this);
		this._data = {};
	}

	_createClass(NamedAdder, [{
		key: "empty",
		value: function empty() {
			return Object.keys(this._data).length == 0;
		}
	}, {
		key: "mapItems",
		value: function mapItems(fn) {
			var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
			var sorted = options.sorted;

			var data = this._data;
			var keys = Object.keys(data);
			if (sorted) keys.sort();
			return keys.map(function (k) {
				return fn(k, data[k]);
			});
		}
	}, {
		key: "get",
		value: function get(name) {
			var n = this._data[name];
			if (n == undefined) n = 0;
			return n;
		}
	}, {
		key: "set",
		value: function set(name, n) {
			if (n == 0) delete this._data[name];else this._data[name] = n;
		}
	}, {
		key: "add",
		value: function add(name) {
			var n = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

			this.set(name, this.get(name) + n);
		}
	}]);

	return NamedAdder;
})(NamedAdderBase);

var NamedMultiplyingAdder = (function (_NamedAdderBase2) {
	_inherits(NamedMultiplyingAdder, _NamedAdderBase2);

	function NamedMultiplyingAdder(parent, factor) {
		_classCallCheck(this, NamedMultiplyingAdder);

		_get(Object.getPrototypeOf(NamedMultiplyingAdder.prototype), "constructor", this).call(this);
		this._parent = parent;
		this._factor = factor;
	}

	// The context property "linearAggregators" is a list of strings.  These
	// strings denote context properties which are "linear aggregators", for
	// which multiplication factors have to be applied in certain parts of
	// the configuration.
	// - CLinearAggregation(...) creates a linear aggregator in the context
	//   and registers it in the "linearAggregators" list.
	// - CMultiplying(...) applies within its subtree a factor to all the
	//   additions to any linear aggregator.

	_createClass(NamedMultiplyingAdder, [{
		key: "add",
		value: function add(name) {
			var n = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

			this._parent.add(name, this._factor * n);
		}

		// or use the inherited method:
	}, {
		key: "multiplying",
		value: function multiplying(factor) {
			return new NamedMultiplyingAdder(this._parent, this._factor * factor);
		}
	}]);

	return NamedMultiplyingAdder;
})(NamedAdderBase);

function CLinearAggregation(name, class_, type) {
	return new Type("linearAggregation", function makeLinearAggregation(ctx) {
		var linearAggregators = ctx.linearAggregators;

		var subAggregators = linearAggregators == null ? [] : linearAggregators.slice(0);
		if (subAggregators.indexOf(name) == -1) subAggregators.push(name);
		return type.makeNode(_extends({}, ctx, _defineProperty({ linearAggregators: subAggregators }, name, new class_())));
	});
}

function CMultiplying(factor, type) {
	return new Type("multiplying", function makeMultiplying(ctx) {
		var subCtx = _extends({}, ctx, { quantity: factor });
		var _ctx$linearAggregators = ctx.linearAggregators;
		var linearAggregators = _ctx$linearAggregators === undefined ? [] : _ctx$linearAggregators;

		linearAggregators.forEach(function (k) {
			return subCtx[k] = ctx[k].multiplying(factor);
		});
		var node = type.makeNode(subCtx);
		linearAggregators.slice(0).reverse().forEach(function (k) {
			return ctx[k].closeMultiplying(factor, subCtx[k]);
		});
		return node;
	});
}

module.exports = {
	SimpleAdder: SimpleAdder,
	NamedAdder: NamedAdder,
	CLinearAggregation: CLinearAggregation, CMultiplying: CMultiplying
};
//# sourceMappingURL=../maps/lib/linear-aggregation.js.map