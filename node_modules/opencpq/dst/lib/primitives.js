"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require("react");

var _require = require("react-bootstrap");

var Input = _require.Input;
var Button = _require.Button;

var DateTimePicker = require('react-widgets/lib/DateTimePicker');

var _require2 = require("./confirm-retract");

var confirmOrRetractButton = _require2.confirmOrRetractButton;

var _require3 = require("./base");

var Type = _require3.Type;
var Node = _require3.Node;

var _require4 = require("./confirm-retract");

var confirmOrRetractButton = _require4.confirmOrRetractButton;

var _require5 = require("./display");

var HBox = _require5.HBox;

function makeSimpleType(name, nodeClass) {
	return function () {
		var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		return new Type(name, function makeSimpleNode(_ref) {
			var value = _ref.value;
			var updateTo = _ref.updateTo;

			function retract() {
				updateTo(undefined);
			}
			var userSelected = value !== undefined;
			return new nodeClass(_extends({}, options, { value: value, updateTo: updateTo, retract: retract, userSelected: userSelected }));
		});
	};
}

var PrimitiveValueNode = (function (_Node) {
	_inherits(PrimitiveValueNode, _Node);

	function PrimitiveValueNode() {
		_classCallCheck(this, PrimitiveValueNode);

		_get(Object.getPrototypeOf(PrimitiveValueNode.prototype), "constructor", this).apply(this, arguments);
	}

	return PrimitiveValueNode;
})(Node);

var StringNode = (function (_PrimitiveValueNode) {
	_inherits(StringNode, _PrimitiveValueNode);

	function StringNode() {
		_classCallCheck(this, StringNode);

		_get(Object.getPrototypeOf(StringNode.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(StringNode, [{
		key: "render",
		value: function render() {
			var _options = this.__options;
			var value = _options.value;
			var updateTo = _options.updateTo;
			var _options$defaultValue = _options.defaultValue;
			var defaultValue = _options$defaultValue === undefined ? "" : _options$defaultValue;
			var className = _options.className;
			var userSelected = _options.userSelected;
			var retract = _options.retract;

			return React.createElement(Input, {
				className: className,
				type: "text",
				value: value,
				placeholder: defaultValue,
				onChange: function (e) {
					return updateTo(e.target.value);
				},
				buttonAfter: confirmOrRetractButton(userSelected, function () {
					return updateTo(defaultValue);
				}, retract)
			});
		}
	}, {
		key: "text",
		get: function get() {
			var _options2 = this.__options;
			var _options2$defaultValue = _options2.defaultValue;
			var defaultValue = _options2$defaultValue === undefined ? "" : _options2$defaultValue;
			var value = _options2.value;

			if (value == undefined || value === "") value = defaultValue;
			return value;
		}
	}, {
		key: "value",
		get: function get() {
			return this.text;
		}
	}]);

	return StringNode;
})(PrimitiveValueNode);

var CString = makeSimpleType("string", StringNode);

var TextareaNode = (function (_StringNode) {
	_inherits(TextareaNode, _StringNode);

	function TextareaNode() {
		_classCallCheck(this, TextareaNode);

		_get(Object.getPrototypeOf(TextareaNode.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(TextareaNode, [{
		key: "render",
		value: function render() {
			var _options3 = this.__options;
			var value = _options3.value;
			var updateTo = _options3.updateTo;
			var _options3$defaultValue = _options3.defaultValue;
			var defaultValue = _options3$defaultValue === undefined ? "" : _options3$defaultValue;
			var className = _options3.className;
			var userSelected = _options3.userSelected;
			var retract = _options3.retract;

			return React.createElement(Input, {
				className: className,
				type: "textarea",
				value: value,
				placeholder: defaultValue,
				onChange: function (e) {
					return updateTo(e.target.value);
				},
				buttonAfter: confirmOrRetractButton(userSelected, function () {
					return updateTo(defaultValue);
				}, retract)
			});
		}
	}]);

	return TextareaNode;
})(StringNode);

var CTextarea = makeSimpleType("textarea", TextareaNode);

// This is actually for unsigned integers.  TODO: Rename?

var IntegerNode = (function (_StringNode2) {
	_inherits(IntegerNode, _StringNode2);

	function IntegerNode(options) {
		_classCallCheck(this, IntegerNode);

		var _options4 = options;
		var className = _options4.className;
		var defaultValue = _options4.defaultValue;
		var value = _options4.value;

		options = _extends({}, options);
		options.className = className ? className + " integer" : "integer";
		if (typeof defaultValue == "number") options.defaultValue = defaultValue.toFixed();
		if (value != undefined && typeof value != "string") options.value = "" + value;
		_get(Object.getPrototypeOf(IntegerNode.prototype), "constructor", this).call(this, options);
	}

	_createClass(IntegerNode, [{
		key: "render",
		value: function render() {
			return React.createElement(
				"div",
				null,
				_get(Object.getPrototypeOf(IntegerNode.prototype), "render", this).call(this),
				/[^0-9]/.test(this.text) ?
				// TODO Error message should also go to the problems view.
				React.createElement(
					"div",
					{ className: "validate validate-error" },
					"Input contains non-digits."
				) : undefined
			);
		}
	}, {
		key: "value",
		get: function get() {
			return parseInt(this.text);
		}
	}]);

	return IntegerNode;
})(StringNode);

var CInteger = makeSimpleType("integer", IntegerNode);

var DateNode = (function (_Node2) {
	_inherits(DateNode, _Node2);

	function DateNode() {
		_classCallCheck(this, DateNode);

		_get(Object.getPrototypeOf(DateNode.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(DateNode, [{
		key: "render",
		value: function render() {
			var _this = this;

			var _options5 = this.__options;
			var defaultValue = _options5.defaultValue;
			var value = _options5.value;
			var updateTo = _options5.updateTo;
			var format = _options5.format;
			var parse = _options5.parse;

			// TODO make user-defined parameterization more generic
			return React.createElement(
				HBox,
				null,
				React.createElement(DateTimePicker, {
					time: false,
					format: format || "MMM dd yyyy",
					parse: parse || ["MMM d y", "MMM d", "M d y", "M d", "y-M-d", "M/d/y", "M/d"],
					value: this.value || null,
					onChange: updateTo
				}),
				(value || defaultValue) && // Don't display if there is neither a value nor a default value
				confirmOrRetractButton(value != undefined, function () {
					return updateTo(_this.value);
				}, function () {
					return updateTo(undefined);
				})
			);
		}
	}, {
		key: "value",
		get: function get() {
			var _options6 = this.__options;
			var defaultValue = _options6.defaultValue;
			var value = _options6.value;

			return value || (typeof defaultValue === 'string' ? new Date(defaultValue) : defaultValue);
		}
	}]);

	return DateNode;
})(Node);

var CDate = makeSimpleType("date", DateNode);

// FIXME: defaultValue handling

var TimeNode = (function (_Node3) {
	_inherits(TimeNode, _Node3);

	function TimeNode() {
		_classCallCheck(this, TimeNode);

		_get(Object.getPrototypeOf(TimeNode.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(TimeNode, [{
		key: "render",
		value: function render() {
			var _this2 = this;

			var _options7 = this.__options;
			var defaultValue = _options7.defaultValue;
			var value = _options7.value;
			var updateTo = _options7.updateTo;
			var format = _options7.format;
			var parse = _options7.parse;

			// TODO make user-defined parameterization more generic
			return React.createElement(
				HBox,
				null,
				React.createElement(DateTimePicker, {
					calendar: false,
					format: format || "h:mm tt",
					parse: parse || ["h:mm tt"],
					value: this.value || null,
					onChange: updateTo
				}),
				(value || defaultValue) && // Don't display if there is neither a value nor a default value
				confirmOrRetractButton(value != undefined, function () {
					return updateTo(_this2.value);
				}, function () {
					return updateTo(undefined);
				})
			);
		}
	}, {
		key: "value",
		get: function get() {
			var _options8 = this.__options;
			var defaultValue = _options8.defaultValue;
			var value = _options8.value;

			return value || (typeof defaultValue === 'string' ? new Date(defaultValue) : defaultValue);
		}
	}]);

	return TimeNode;
})(Node);

var CTime = makeSimpleType("date", TimeNode);

var BooleanNode = (function (_PrimitiveValueNode2) {
	_inherits(BooleanNode, _PrimitiveValueNode2);

	function BooleanNode() {
		_classCallCheck(this, BooleanNode);

		_get(Object.getPrototypeOf(BooleanNode.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(BooleanNode, [{
		key: "render",
		value: function render() {
			var _this3 = this;

			var _options9 = this.__options;
			var userSelected = _options9.userSelected;
			var retract = _options9.retract;
			var _options9$disabled = _options9.disabled;
			var disabled = _options9$disabled === undefined ? false : _options9$disabled;
			var updateTo = _options9.updateTo;

			return React.createElement(
				"span",
				null,
				React.createElement("input", {
					type: "checkbox",
					checked: this.value,
					onChange: function (e) {
						return updateTo(e.target.checked);
					},
					disabled: disabled
				}),
				confirmOrRetractButton(userSelected, function () {
					return updateTo(_this3.value);
				}, retract, "xsmall")
			);
		}
	}, {
		key: "value",
		get: function get() {
			var _options10 = this.__options;
			var _options10$defaultValue = _options10.defaultValue;
			var defaultValue = _options10$defaultValue === undefined ? false : _options10$defaultValue;
			var _options10$value = _options10.value;
			var value = _options10$value === undefined ? defaultValue : _options10$value;

			return value;
		}
	}]);

	return BooleanNode;
})(PrimitiveValueNode);

var CBoolean = makeSimpleType("boolean", BooleanNode);

var UnitNode = (function (_Node4) {
	_inherits(UnitNode, _Node4);

	function UnitNode() {
		_classCallCheck(this, UnitNode);

		_get(Object.getPrototypeOf(UnitNode.prototype), "constructor", this).apply(this, arguments);
	}

	_createClass(UnitNode, [{
		key: "render",
		value: function render() {
			return undefined;
		}
	}]);

	return UnitNode;
})(Node);

var CUnit = makeSimpleType("unit", UnitNode);

module.exports = {
	CString: CString, CTextarea: CTextarea, CInteger: CInteger, CDate: CDate, CTime: CTime, CBoolean: CBoolean, CUnit: CUnit
};
//# sourceMappingURL=../maps/lib/primitives.js.map