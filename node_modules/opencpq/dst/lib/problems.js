"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var React = require("react");

var _require = require("react-bootstrap");

var Table = _require.Table;
var Glyphicon = _require.Glyphicon;

var _require2 = require("./base");

var Type = _require2.Type;
var Node = _require2.Node;

var _require3 = require("./workbench");

var View = _require3.View;

var glyphmap = {
	error: "ban-circle",
	warning: "warning-sign"
};

var Problems = (function () {
	function Problems() {
		_classCallCheck(this, Problems);

		this._problemList = [];
	}

	_createClass(Problems, [{
		key: "add",
		value: function add(problem) {
			problem = _extends({}, problem, { fragment: "problem_" + this._problemList.length });
			this._problemList.push(problem);
			return problem;
		}
	}, {
		key: "empty",
		value: function empty() {
			return this._problemList.length == 0;
		}
	}, {
		key: "mapProblems",
		value: function mapProblems(fn) {
			return this._problemList.map(fn);
		}
	}, {
		key: "render",
		value: function render() {
			var _this = this;

			var rows = (function () {
				var _rows = [];
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
					for (var _iterator = _this._problemList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var _step$value = _step.value;
						var level = _step$value.level;
						var msg = _step$value.msg;
						var fragment = _step$value.fragment;

						if (level !== "info") {
							_rows.push(React.createElement(
								"tr",
								null,
								React.createElement(
									"td",
									{ className: "problem-msg problem-" + level },
									React.createElement(Glyphicon, { glyph: glyphmap[level] }),
									" ",
									React.createElement(
										"a",
										{ href: "#" + fragment },
										msg
									)
								)
							));
						}
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator["return"]) {
							_iterator["return"]();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}

				return _rows;
			})();
			// TODO: Add <col> elements
			return React.createElement(
				Table,
				{ className: "problems" },
				React.createElement(
					"tbody",
					null,
					rows.length === 0 ? React.createElement(
						"tr",
						null,
						React.createElement(
							"td",
							null,
							React.createElement(
								"div",
								{ className: "validate validate-info" },
								"(no entries)"
							)
						)
					) : { rows: rows }
				)
			);
		}
	}]);

	return Problems;
})();

function VProblems(_ref) {
	var problems = _ref.problems;

	return new View("problems", function renderProblems() {
		return problems.render();
	});
}

module.exports = { VProblems: VProblems, Problems: Problems };
//# sourceMappingURL=../maps/lib/problems.js.map