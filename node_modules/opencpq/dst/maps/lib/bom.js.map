{"version":3,"sources":["lib/bom.js"],"names":[],"mappings":"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","file":"lib/bom.js","sourcesContent":["var React = require(\"react\");\nvar {Type, Node} = require(\"./base\");\nvar {View} = require(\"./workbench\");\nvar {CSideEffect} = require(\"./util\");\nvar {ButtonGroup, Button, Glyphicon, Table} = require(\"react-bootstrap\");\n\nvar saveAs = require(\"browser-filesaver\");\n\n// TODO Use a CSV lib?\nfunction csvLine(fields) {\n\tvar line = \"\";\n\tfields.forEach(field => { \n\t\tif (line.length > 0)\n\t\t\tline += \";\"\n\t\tline += typeof field === \"number\" ? field : '\"' + field.toString().replace(/\"/g, '\"\"') + '\"';\n\t});\n\tline += \"\\n\";\n\treturn line;\n}\n\nclass BOMView {\n\t// TODO Replace itemList with something more generic, e.g., a\n\t// function mapping the item to extra info (but in what format?).\n\tconstructor(name, itemList, bom) {\n\t\tthis.name = name;\n\t\tvar itemMap = {};\n\t\titemList.forEach(entry => itemMap[entry.itemId] = entry);\n\t\tthis.__itemMap = itemMap;\n\t\tthis.__bom = bom;\n\t}\n\trender() {\n\t\treturn <div>\n\t\t    <ButtonGroup>\n\t\t\t\t<Button onClick={() => this.exportCSV()}><Glyphicon glyph=\"th\"/> export as CSV</Button>\n\t\t\t</ButtonGroup>\n\t\t\t{this.renderBOM()}\n\t\t</div>;\n\t}\n\texportCSV() {\n\t\tvar csv = [];\n\t\tvar itemMap = this.__itemMap;\n\t\tthis.__bom.mapItems(\n\t\t\t(item, quantity) => {\n\t\t\t\tvar entry = itemMap[item];\n\t\t\t\tvar label = entry == undefined ? \"\" : entry.label;\n\t\t\t\tvar matNo = entry == undefined ? \"\" : entry.materialNumber;\n\t\t\t\tcsv.push(csvLine([quantity, item, label, matNo])); \n\t\t\t});\n\t\tvar blob = new Blob(csv, {type: \"text/csv;charset=utf-8\"});\n\t\tsaveAs(blob, \"openCPQ.csv\");\n\t}\n\trenderBOM() {\n\t\tvar itemMap = this.__itemMap;\n\t\treturn <Table className=\"bom\">\n\t\t\t<colgroup>\n\t\t\t\t<col className=\"bom-col-quantity\"/>\n\t\t\t\t<col className=\"bom-col-item\"/>\n\t\t\t\t<col className=\"bom-col-description\"/>\n\t\t\t\t<col className=\"bom-col-material-number\"/>\n\t\t\t</colgroup>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th className=\"bom-quantity-head\">#</th>\n\t\t\t\t<th className=\"bom-item-head\">Item ID</th>\n\t\t\t\t<th className=\"bom-description-head\">Description</th>\n\t\t\t\t<th className=\"bom-material-number-head\">Material No.</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t{this.__bom.empty() ?\n\t\t\t <tr><td colSpan={4}>\n\t\t\t\t <div className=\"validate validate-info\">(no entries)</div>\n\t\t\t </td></tr> :\n\t\t\t this.__bom.mapItems(\n\t\t\t\t (item, quantity) => {\n\t\t\t\t\t var entry = itemMap[item];\n\t\t\t\t\t var label = entry == undefined ? \"(missing)\" : entry.label;\n\t\t\t\t\t var matNo = entry == undefined ? \"(missing)\" : entry.materialNumber;\n\t\t\t\t\t return <tr>\n\t\t\t\t\t\t <td className=\"bom-quantity\">{quantity}</td>\n\t\t\t\t\t\t <td className=\"bom-item\">{item}</td>\n\t\t\t\t\t\t <td className=\"bom-description\">{label}</td>\n\t\t\t\t\t\t <td className=\"bom-material-number\">{matNo}</td>\n\t\t\t\t\t </tr>;\n\t\t\t\t }\n\t\t\t )}\n\t\t</tbody></Table>;\n\t}\n}\n\nfunction VBOM(itemList, {bom}) {\n\treturn new BOMView(\"bom\", itemList, bom);\n}\n\nfunction CBOMEntry(name, quantity, type) {\n\treturn CSideEffect((node, {bom}) => bom.add(name, quantity), type)\n}\n\nmodule.exports = {VBOM, BOMView, CBOMEntry, csvLine};\n"],"sourceRoot":"/source/"}